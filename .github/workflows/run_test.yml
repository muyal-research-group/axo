name: Run Unit Test via Pytest  
  
on:
  push: 
    branches: ["*"]
  pull_request:
    branches: ["*"]
    paths:
      - "src/**"
      - "test/**"
      - "pyproject.toml"
  
  
jobs:  
  build:  
    runs-on: ubuntu-latest  
    strategy:  
      matrix:  
        python-version: ["3.11"]  
    services:
      mongodb:
        image: mongo:6
        ports:
          - 27017:27017
        options: >-
          --health-cmd="mongosh --eval 'db.adminCommand(\"ping\")'"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5
    steps:  
      - uses: actions/checkout@v3  
      - name: Set up Python ${{ matrix.python-version }}  
        uses: actions/setup-python@v4  
        with:  
          python-version: ${{ matrix.python-version }}  
      - name: Allow writing to folders
        run: |
            sudo mkdir -p /log
            sudo chown $USER:$USER /log
            sudo chmod 777 /log
            sudo mkdir -p /mictlanx
            sudo chown $USER:$USER /mictlanx
            sudo chmod 777 /mictlanx
            sudo mkdir -p /sink
            sudo chown $USER:$USER /sink
            sudo chmod 777 /sink
      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH  # Ensure poetry is on PATH

      - name: Configure Poetry
        run: |
          poetry config virtualenvs.create true
          poetry config virtualenvs.in-project true  # Optional: keeps `.venv` inside project

      - name: Install Dependencies
        run: poetry install --no-interaction --no-root


      - name: Lint with Ruff  
        run: |  
          pip install ruff  
          ruff --format=github --target-version=py311 .  
        continue-on-error: true  
        
      - name: Wait for MongoDB to be ready
        run: |
          for i in {1..10}; do
            if mongosh --eval "db.adminCommand('ping')" > /dev/null 2>&1; then
              echo "MongoDB is up!"
              break
            fi
            echo "Waiting for MongoDB..."
            sleep 3
          done

      - name: Test with pytest  
        run: |  
          poetry run coverage run -m pytest  -v -s  
        env:
          LOG_PATH: log  
      - name: Generate Coverage Report  
        run: |  
          poetry run coverage report -m
